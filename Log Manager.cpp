// LOG Manager : Question generated by ChatGPT

#include<bits/stdc++.h>
using namespace std;


// solution assumes they will ALWAYS be split by a SINGLE space

class LogManager {
    public:
        unordered_map<string, map<int, string>> logs;
        LogManager() {
            
        }
        
        void readLogLine(string logLine) {
            string curStr = "";
            for (int i = 0; i < logLine.size(); i++) {
                if (logLine[i] == ' ') {
                    if (curStr == "LOG") {
                        processLog(logLine.substr(i+1));            
                    }
                    
                    if (curStr == "GET") {
                        processGet(logLine.substr(i+1));
                    }
                }
                
                curStr += logLine[i];
            }            
        }
    private:
        void processLog(string logLine) {
            string event_name = ""; 
            string message;
            string logSubstr;
            
            // extract event name;
            for (int i = 0; i < logLine.size(); i++) {
                if (logLine[i] == ' ') {
                    logSubstr = logLine.substr(i+1);
                    break;
                }
                
                event_name += logLine[i];
            }
            // extract message and timestamp:
            string timestampStr = "";
            for (int i = 0; i < logSubstr.size(); i++) {
                if (logSubstr[i] == ' ') {
                    message = logSubstr.substr(i+1);
                    break;
                }
                
                timestampStr += logSubstr[i];
            }
            // cout << event_name << " . " << timestampStr << " . " << message << endl;
            // Insert into map - **** check syntax here ***
            logs[event_name][stoi(timestampStr)] = message; // add(stoi(timestampStr), message);
        }
        
        void processGet(string logLine) {
            string event_name = logLine;
            if (logs.find(event_name) == logs.end())
                cout << "No events found\n";
            else {
                for (auto elem : logs[event_name]) {
                    cout << elem.first << " " << elem.second << endl;
                }
            }
        }

};

int main() {
    LogManager logManager;
    vector<string> logs = {
        "LOG auth-service 1002 'user login failed'",
        "LOG chat-service 1001 'connection timeout'",
        "LOG auth-service 1000 'user login success'",
        "GET auth-service",
        "GET chat-service"
    };
    
    for (auto log : logs) {
        logManager.readLogLine(log);
    }
}
